list.dirs()
list.files()
str_detect(list.files(), ".Rmd", negate = TRUE)
library(tidyverse)
library(DynTxRegime)
str_detect(list.files(), ".Rmd", negate = TRUE)
str_subset(list.files(), ".Rmd", negate = TRUE)
map(scripts, source)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
map(scripts, source)
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
map(scripts, source)
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
map(scripts, source)
source(scripts)
quietly(map(scripts, source))
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
quietly(map(scripts, source))
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
quietly(map(scripts, source))
set.seed(309482)
# Some parameters we will need
N <- 100
firstLineTreatments <- as.character(1:6)
secondLineTreatments <- c("2", "3", "7", "8")
augmentationTreatments <- c("a1", "a2")
standardOfCareTreatment <- "1"
simDF <- makePpts(N = N)
simDF
simDF <- simDF %>%
makeCovariates(covariateFn = covariateFn_v1,
numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1)
source('~/Dropbox/bacpac_collaborativeSMARTsims/Code/wrappers.R', echo=TRUE)
simDF <- simDF %>%
makeCovariates(covariateFn = covariateFn_v1,
numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1)
source('~/Dropbox/bacpac_collaborativeSMARTsims/Code/wrappers.R', echo=TRUE)
simDF <- simDF %>%
makeCovariates(covariateFn = covariateFn_v1,
numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1)
simDF
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
quietly(map(scripts, source))
set.seed(309482)
# Some parameters we will need
N <- 100
firstLineTreatments <- as.character(1:6)
secondLineTreatments <- c("2", "3", "7", "8")
augmentationTreatments <- c("a1", "a2")
standardOfCareTreatment <- "1"
simDF <- makePpts(N = N)
simDF
simDF <- simDF %>%
makeCovariates(covariateFn = covariateFn_v1,
numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1)
simDF
simDF <- simDF %>%
allocateStage1Treatments(allocationFn_stage1_v1,
firstLineTreatments = firstLineTreatments)
simDF
simDF <- simDF %>%
generateY1(generateY1Fn = generateNormalY1,
intercept = 1,
coefs = c("X_1" = -1, "W_1" = 1, "A1_2*W_1" = 0.5),
sigma = 1)
simDF
simDF <- simDF %>%  assignResponderStatus(assignResponderStatusByQuantile,
ctsOutcome1 = Y1, cutoffs = c(0.2, 0.8)) %>%
allocateStage2Treatments(allocationFn_stage2 = allocationFn_stage2_v1,
firstLineTreatments = firstLineTreatments,
secondLineTreatments = secondLineTreatments,
augmentationTreatments = augmentationTreatments,
standardOfCareTreatment = standardOfCareTreatment) %>%
generateY2(generateY2Fn_v1, coefs = c("A1_1*X_1" = 1, "X_1" = 2, "A2_7*W_1" = 1),
sigma = 1) %>%
generateY(generateYFn = setYtoY2)
simDF
metadata <- list(N = 600,
firstLineTreatments = as.character(1:6),
secondLineTreatments = c("2", "3", "7", "8"),
augmentationTreatments = c("a1", "a2"),
standardOfCareTreatment = "1")
args <- list(
makePpts_fn = "makePpts",
makePpts_args = list(metadata[["N"]]),
makeCovariates_fn = "covariateFn_v1",
makeCovariates_args = list(numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1),
allocateStage1Treatments_fn = "allocationFn_stage1_v1",
allocateStage1Treatments_args = list(metadata$firstLineTreatments),
generateY1_fn = "generateNormalY1",
generateY1_args = list(intercept = 1,
coefs = c("X_1" = -1, "W_1" = 1, "A1_2*W_1" = 0.5),
sigma = 1),
assignResponderStatus_fn = "assignResponderStatusByQuantile",
assignResponderStatus_args = list(ctsOutcome1 = "Y1", cutoffs = c(0.2, 0.8)),
allocateStage2Treatments_fn = "allocationFn_stage2_v1",
allocateStage2Treatments_args = list(firstLineTreatments = metadata$firstLineTreatments,
secondLineTreatments = metadata$secondLineTreatments,
augmentationTreatments = metadata$augmentationTreatments,
standardOfCareTreatment = metadata$standardOfCareTreatment),
generateY2_fn = "generateY2Fn_v1",
generateY2_args = list(coefs = c("A1_1*X_1" = 1, "X_1" = 2, "A2_7*W_1" = 1),
sigma = 1),
generateY_fn = "setYtoY2",
generateY_args = NULL
)
makeSimDataWrapper(metadata, args, 1)
set.seed(309482)
# Create L data sets
L <- 100
# allSimData <- reduce(map(1:L, makeSimDataWrapper, metadata = metadata, args = args), bind_rows)
allSimData <- map(1:L, makeSimDataWrapper, metadata = metadata, args = args)
moMain <- modelObj::buildModelObj(model = ~ X_1 + X_2 + X_3 + W_1,
solver.method = 'lm')
moCont <- moMain
res <- map(allSimData, doQLearning, moMain_stage2 = moMain, moCont_stage2 = moCont,
moMain_stage1 = moMain, moCont_stage1 = moCont)
estimatedValues <- map(res, estimator)
unlist(estimatedValues)
library(tidyverse)
library(DynTxRegime)
scripts <- str_subset(list.files(), ".Rmd", negate = TRUE)
quietly(map(scripts, source))
set.seed(309482)
# Some parameters we will need
N <- 100
firstLineTreatments <- as.character(1:6)
secondLineTreatments <- c("2", "3", "7", "8")
augmentationTreatments <- c("a1", "a2")
standardOfCareTreatment <- "1"
simDF <- makePpts(N = N)
simDF
simDF <- simDF %>%
makeCovariates(covariateFn = covariateFn_v1,
numBinaryCovars = 3, props = c(0.6, 0.5, 0.4),
numNormalCovars = 1, mu = 0, sd = 1)
simDF
simDF <- simDF %>%
allocateStage1Treatments(allocationFn_stage1_v1,
firstLineTreatments = firstLineTreatments)
simDF
simDF <- simDF %>%
generateY1(generateY1Fn = generateNormalY1,
intercept = 1,
coefs = c("X_1" = -1, "W_1" = 1, "A1_2*W_1" = 0.5),
sigma = 1)
simDF
simDF <- simDF %>%  assignResponderStatus(assignResponderStatusByQuantile,
ctsOutcome1 = Y1, cutoffs = c(0.2, 0.8)) %>%
allocateStage2Treatments(allocationFn_stage2 = allocationFn_stage2_v1,
firstLineTreatments = firstLineTreatments,
secondLineTreatments = secondLineTreatments,
augmentationTreatments = augmentationTreatments,
standardOfCareTreatment = standardOfCareTreatment) %>%
generateY2(generateY2Fn_v1, coefs = c("A1_1*X_1" = 1, "X_1" = 2, "A2_7*W_1" = 1),
sigma = 1) %>%
generateY(generateYFn = setYtoY2)
simDF
makeSimDataWrapper(metadata, args, 1)
set.seed(309482)
# Create L data sets
L <- 100
# allSimData <- reduce(map(1:L, makeSimDataWrapper, metadata = metadata, args = args), bind_rows)
allSimData <- map(1:L, makeSimDataWrapper, metadata = metadata, args = args)
